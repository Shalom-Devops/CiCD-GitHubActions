---
name: Java-CI/CD
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
env:
  IMAGE_NAME: pavan9999/github-actions
  IMAGE_TAG: moonpage
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: "1.8"
          distribution: adopt
          cache: maven
      - name: Build Stage
      - name: Build with Maven 
        run: mvn clean install  
       #SonarQube-Scaning and code quality && Coverage
      - name: SonarQube-Scan Stage
        uses: sonarsource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@master
        # Force to fail step after specific time
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        #Dependency-Check(Security Composition Analysis)
      - name: Dependency-Check(SCA) Stage
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v6.0.5/dependency-check-6.0.5-release.zip
           unzip dependency-check-6.0.5-release.zip
           chmod -R 775 dependency-check/bin/dependency-check.sh
           cp /home/runner/work/CiCD-GitHubActions/CiCD-GitHubActions/target/*.war dependency-check
           cd dependency-check
           ./bin/dependency-check.sh --project test --format HTML --scan *.war
           ls -lrt && pwd && cat dependency-check-report.html
           cd ..
      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
          name: Dependency check report
          path: ${{github.workspace}}/reports
        #JUNIT TESTING
      - name: Junit-Test Stage
        run: mvn test
      - name: Upload JUnit Test Results
        uses: actions/upload-artifact@v2
        with:
          name: junit-results
          path: /home/runner/work/CiCD-GitHubActions/CiCD-GitHubActions/*
      - name: Publish JUnit Test Report
        run: echo "JUnit test results uploaded successfully."
       #Docker Image Build && Push
      - name: Docker-Image-Build & Push
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: ${IMAGE_NAME}
          tags: ${IMAGE_TAG}
          registry: docker.io
          dockerfile: Dockerfile
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      #Docker Image Scanning
      - name: Install Trivy 
        run: |
         sudo apt-get update
          sudo apt-get install -y curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Scan Docker Image
        run: |
          trivy image ${IMAGE_NAME}:${IMAGE_TAG}   
      - name: Upload scan results
        uses: actions/upload-artifact@v2
        with:
          name: trivy-scan-results
          path: scan-results.json
  
  jmeter-test:
    needs: build
    runs-on: ubuntu-latest
    steps:
     - name: Checkout code
       uses: actions/checkout@v2
     - name: Setup Java
       uses: actions/setup-java@v1
       with:
          java-version: 11
     - name: Download and extract JMeter
       run: |
         curl -L https://downloads.apache.org/jmeter/binaries/apache-jmeter-5.5.zip -o jmeter.zip
         unzip jmeter.zip

     - name: Run JMeter test
       run: |
         ./apache-jmeter-5.5/bin/jmeter -n -t test.jmx -l result.jtl

     - name: Upload test results    
       uses: actions/upload-artifact@v2
       with:
          name: jmeter-test-results
          path: /home/runner/work/cicd-github-actions/cicd-github-actions/results.jtl
